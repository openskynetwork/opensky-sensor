#!/usr/bin/perl

use strict;
use warnings;
use Debconf::Client::ConfModule ':all';

version '2.0';
settitle 'openskyd/title';

my $first = 1;
my (undef, $user) = get "openskyd/username";

my $from = $ARGV[1];
if ($from) {
	fset("openskyd/serial", "seen", "true");
}

while (1) {
	my @fail = (
		check(critical => 'latitude', (\&notempty, \&rational, &gen_range(-90, 90))),
		check(critical => 'longitude', (\&notempty, \&rational, &gen_range(-180, 180))),
		check(critical => 'altitude', (\&notempty, \&rational)),
		check(high => 'username', (&gen_length(40))),
		check(high => 'serial', \&integer),
		check(high => 'port', (\&integer, &gen_range(1, 65535))),
		check(high => 'host'),
	);
	
	last unless @fail;

	do { reset "openskyd/$_->{template}" foreach(@fail); } unless $first;
	beginblock();
	do { input high => "openskyd/$_->{template}format" foreach (@fail) }
		unless $first;
	input $_->{priority} => "openskyd/$_->{template}" foreach (@fail);
	endblock();
	go();

	$first = 0;
}

my (undef, $newuser) = get "openskyd/username";
if (defined($user) && $user ne "" &&
	(!defined($newuser) || $user ne $newuser)) {
	input high => "openskyd/usernamechanged";
	go();
}

# check if value is not empty
sub notempty {
	my (undef, $val) = @_;
	$val ne '';
}

# check if value is a rational number
sub rational {
	my (undef, $val) = @_;
	return 1 if $val eq '';
	return 0 unless $val=~/^([+-]?)(?=\d|\.\d)\d*(\.\d*)?$/;
	return 1;
}

# check if value is an integer
sub integer {
	my (undef, $val) = @_;
	return 1 if $val eq '';
	return 0 unless $val=~/^[+-]?\d+$/;
	return 1;
}

# generate a function which checks the range
sub gen_range {
	my ($min, $max) = @_;
	return sub {
		my (undef, $val) = @_;
		return 1 if $val eq '';
		(!defined $min || $val >= $min) && 
			(!defined $max || $val <= $max);
	}
}

# generate a function which checks the string length
sub gen_length {
	my ($len) = @_;
	return sub {
		my (undef, $val) = @_;
		return !!(length($val) <= $len);
	}
}

# get value for a key, check some predicates
sub check {
	my ($priority, $key, @predicates) = @_;

	my $ret = { priority => $priority, template => $key };
	
	return $ret if $first;

	# get value
	my ($rc, $val) = get "openskyd/$key";

	return $ret unless defined $val;

	foreach my $p (@predicates) {
		&$p($key, $val) || return $ret;
	}
	();
}

